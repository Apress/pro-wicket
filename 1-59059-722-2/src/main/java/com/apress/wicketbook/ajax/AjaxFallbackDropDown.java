package com.apress.wicketbook.ajax;

import java.util.List;

import wicket.WicketRuntimeException;
import wicket.ajax.AjaxRequestTarget;
import wicket.ajax.IAjaxCallDecorator;
import wicket.ajax.calldecorator.AjaxPostprocessingCallDecorator;
import wicket.ajax.form.AjaxFormComponentUpdatingBehavior;
import wicket.markup.ComponentTag;
import wicket.markup.html.form.DropDownChoice;

public class AjaxFallbackDropDown extends DropDownChoice {
	public AjaxFallbackDropDown(String id, List choices) {
		super(id, choices);
		setOutputMarkupId(true);
		add(new DropDownAjaxUpdatingBehavior());
	}
	
	//Make the access modifier 'public' 
	//so that it can be accessed from 
	//within the DropDownAjaxUpdatingBehavior
	
	public void onSelectionChanged(final Object newSelection) {
	}

	//We need access to the URL generated by
	//DropDownChoice Component on selection
	//change. Make sure that the method is 
	//'final' so that clients cannot override it 
	//to return false
	
	public final boolean wantOnSelectionChangedNotifications() {
		return true;
	}

	private class DropDownAjaxUpdatingBehavior extends
			AjaxFormComponentUpdatingBehavior {
		// The original onchange script added by the
		// component. It may or may not be preset depending upon
		// the return value of wantOnSelectionChangedNotifications().
		String prevScript;

		DropDownAjaxUpdatingBehavior() {
			// Ajax call configured for onchange event.
			super("onchange");
		}

		// onUpdate call the onSelectionChanged method passing in the
		// AjaxRequestTarget.
		protected void onUpdate(AjaxRequestTarget target) {
			AjaxFallbackDropDown dropDownChoice = (AjaxFallbackDropDown) getFormComponent();
			//Note that you can access the current dropdownchoice selection
			//through dropDownChoice.getModelObject()
			dropDownChoice.onSelectionChanged(target);
			
			//Uncomment the following to simulate Ajax failure
			
			//throw new WicketRuntimeException(
			//		"Exception when handling DropDown Ajax request");
		}

		// Since the above method internally calls
		// onSelectionChanged, make sure that the behavior
		// is being bound to a DropDownChoice.
		protected void onBind() {
			super.onBind();
			if (!(getComponent() instanceof AjaxFallbackDropDown)) {
				throw new WicketRuntimeException(
						"Behavior "
								+ getClass().getName()
								+ " can only be added to an isntance of a AjaxFallbackDropDown");
			}
		}

		// Retrieve the original onchange script added by the component
		// if present.
		protected void onComponentTag(final ComponentTag tag) {
			if (tag.getAttributes().containsKey("onchange")) {
				this.prevScript = tag.getAttributes().get("onchange")
						.toString();
			} else {
				prevScript = null;
			}
			// Get the AjaxFormComponentUpdatingBehavior
			// to add its onchange event script.
			super.onComponentTag(tag);
		}

		protected IAjaxCallDecorator getAjaxCallDecorator() {
			return new AjaxPostprocessingCallDecorator(null) {
				// On Ajax failure, execute the original onchange script added
				// by the component. This would trigger the normal
				// request.
				public CharSequence postDecorateOnFailureScript(
						CharSequence script) {
					if (prevScript != null)
						return script + ";" + prevScript;
					else
						return script + "";
				}
			};
		}
	}
}
