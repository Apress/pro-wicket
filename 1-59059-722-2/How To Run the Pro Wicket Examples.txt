How to access the Examples
	
	Create a Eclipse Java project from "existing source". Unzipping the book's source code 
	should result in a root folder (d:\lab\1-59059-722-2 for e.g.). It should contain the 
	.project and .classpath required by eclipse. When creating the new Eclipse project,
	make sure that you point Eclipse to this root folder (through the option 
	"Create Project from Existing Source"). You can name the Project "Pro Wicket".
	
	Make sure that Java5 is selected as the installed JRE. In Eclipse,
	
	Windows->Preferences->Java->Installed JREs is the place to be looking at for setting up Java5.
		
	Refer to the Chapter 1 section titled 'Running the Application' to start jetty with the
	given configuration.

	All examples can be accessed through this URL - http://localhost:8080/wicket/index.html
	
	The jetty config under src/main/resources/jetty-config.xml is being referenced.
	
	Every chapter has a corresponding dedicated java package. All packages have their
	own Wicket WebApplication class. Override the WebApplication.getHomePage() to return a
	different Page class when trying out the examples.
		

How to run the Wicket-Spring Integration Application?

	This example is not deployed by default.

	Look for the following comment in web.xml - 'Uncomment to run with Spring and EJB3'

	It occurs in more than one place in the file. Remove these comments to test the 
	Wicket-Spring-EJB3 integration. 
	
	The Hibernate3 integration uses com.apress.wicketbook.common.Book instance as the 
	persistent POJO. The same class is used in chapter 3 and others as well. 
	When using Hibernate3, the Book 'id's are auto-generated by the EJB container. 
	So the code that explicity generates the ID need to be commented when using Hibernate3. 
	
	Look for the following in the accompanying source code - 
			
		package com.apress.wicketbook.common;
		
		public class Book implements Serializable{
		
			public Book(String author, String category, String title, float price,
					String publisher) {
				super();
				//Generate internal book ID.
				//WHEN USING EJB3, THE CONTAINER WILL GENERATE THE ID. YOU SHOULD NOT
				//BE GENERATING THE ID. 
				//id = ++counter;			

	Note that other examples that depend on the Book class to generate its own 'ID' 
	will not work after the above changes are in-corporated.
	
	You need to restart Jetty after the incorporating the above changes.
	
	This code was developed using the following -

	Hibernate 3.2.0 CR2,
	Hibernate-annotations-3.2.0 CR1,
	Hibernate-entitymanager-3.2.0 CR1

	It was observed that the examples work with HSQLDB 1.7.3.3 version.
	The HSQLDB version is included in the lib folder of this project. Do not use
	the HSQLDB version that ships with Spring or Hibernate.
		
	

	

















